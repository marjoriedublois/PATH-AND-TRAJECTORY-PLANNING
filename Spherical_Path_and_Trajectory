import roboticstoolbox as rtb
import numpy as np
from roboticstoolbox import DHRobot, RevoluteDH, PrismaticDH

# link lengths in mm
a1 = float(input("a1 = ")) # For testing, 70 mm
a2 = float(input("a2 = ")) # For testing, 80 mm
a3 = float(input("a3 = ")) # For testing, 40 mm

# link converted to meters
def mm_to_meter(a):
    m = 1000 # 1 meter = 1000 mm
    return a/m

a1 = mm_to_meter(a1)
a2 = mm_to_meter(a2)
a3 = mm_to_meter(a3)

# link limits converted to meters
lm3 = float(input("lm3 = ")) # 30mm
lm3 = mm_to_meter(lm3)

# Create Links
# [robot variable]=DHRobot([RevoluteDH(d,r/a,alpha,offset)])
Sphe_Standard = DHRobot([
    RevoluteDH(a1,0,(90/180)*np.pi,0,qlim=[(-90/180)*np.pi,(90/180)*np.pi]),
    RevoluteDH(0,0,(90/180)*np.pi,(90/180)*np.pi,qlim=[(-20/180)*np.pi,(90/180)*np.pi]),
    PrismaticDH(0,0,0,a2+a3,qlim=[0,lm3]),
], name='Spherical')

print(Sphe_Standard)

# degrees to radian converter
def deg_to_rad(T):
    return (T/180.0)*np.pi


# q Paths
# for Sphe_Standard Joint Variables = ([T1,T2,d3])
q0 = np.array([0,0,0]) #origin
q1 = np.array([deg_to_rad(float(input("T1 = "))),
                deg_to_rad(float(input("T2 = "))),
                mm_to_meter(float(input("d3 = ")))])

#q2 = np.array([deg_to_rad(float(input("T1 = "))),
                #deg_to_rad(float(input("T2 = "))),
                #mm_to_meter(float(input("d3 = ")))])

#q3 = np.array([deg_to_rad(float(input("T1 = "))),
                #deg_to_rad(float(input("T2 = "))),
                #mm_to_meter(float(input("d3 = ")))])


# Trajectory commands
traj1 = rtb.jtraj(q0,q1,10)
print(traj1)
print(traj1.q)
#traj2 = rtb.jtraj(q1,q2,50)
#print(traj2)
#print(traj2.q)
#traj3 = rtb.jtraj(q2,q3,50)
#print(traj3)
#print(traj3.q)

# plot scale limits
x1 = -0.1
x2 = 0.1
y1 = -0.1
y2 = 0.1
z1 = -0.1
z2 = 0.1

# for Joint Variable vs Time(s) table
rtb.qplot(traj1.q)
#rtb.qplot(traj2.q)
#rtb.qplot(traj3.q)

# Plot of trajectory
Sphe_Standard.plot(traj1.q, limits=[x1,x2,y1,y2,z1,z2])
#Sphe_Standard.plot(traj2.q, limits=[x1,x2,y1,y2,z1,z2])
#Sphe_Standard.plot(traj3.q, limits=[x1,x2,y1,y2,z1,z2])


# plot commands
Sphe_Standard.teach(jointlabels=1)


